# -*- coding: utf-8 -*-
"""
   File Name：     47 不用加减乘除做加法
   Description :
   Author :       simon
   date：          19-3-20
"""

"""
num2 表示进位的值
num1 表示不考虑进位时的加法结果

python中整数是无限位宽
所以这里需要将结果限制到32位整数 通过 & 0xFFFFFFFF实现
最终判断这是一个正数还是负数 如果是 负数需要 - 2^32=4294967296

简单来说这道题就不要用Python来做

^ 实现二进制加法（不考虑进位） 
& 实现二进制进位计算

链接：https://www.nowcoder.com/questionTerminal/59ac416b4b944300b617d4f7f111b215
来源：牛客网

首先看十进制是如何做的： 5+7=12，三步走
第一步：相加各位的值，不算进位，得到2。
第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。

第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。

同样我们可以用三步走的方式计算二进制值相加： 5-101，7-111 第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。

第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。

第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
     继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果
"""
# -*- coding:utf-8 -*-
class Solution:
    def Add(self, num1, num2):
        # write code here
        while num2:
            sum = num1 ^ num2
            num2 = (num1 & num2) << 1
            num1 = sum & 0xFFFFFFFF
        return num1 if not num1 >> 31 else num1 - 2**32 # 判断符号位